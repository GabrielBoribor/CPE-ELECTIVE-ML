import cv2
import numpy as np
import matplotlib.pyplot as plt
import os

# Path to the image file
image_path = r'C:\Users\Borvs\Desktop\test\apple.jfif'
if not os.path.exists(image_path):
    raise FileNotFoundError(f"The file '{image_path}' does not exist.")

# Load the image directly with OpenCV and convert from BGR to RGB
image_np = cv2.imread(image_path)
image_rgb = cv2.cvtColor(image_np, cv2.COLOR_BGR2RGB)

# Convert the image to grayscale for edge detection
gray_image = cv2.cvtColor(image_np, cv2.COLOR_BGR2GRAY)

# Define convolution kernels
edge_detection_kernel = np.array([[-1, -1, -1],
                                  [-1, 8, -1],
                                  [-1, -1, -1]])

blurring_kernel = np.ones((5, 5), dtype=np.float32) / 25

# Apply 2D convolution for edge detection
edge_detected_image = cv2.filter2D(gray_image, -1, edge_detection_kernel)

# Apply 2D convolution for blurring (on the original RGB image)
blurred_image = cv2.filter2D(image_rgb, -1, blurring_kernel)

# Plotting the images
plt.figure(figsize=(15, 10))

# Original Image
plt.subplot(1, 3, 1)
plt.imshow(image_rgb)
plt.title('Original Image')
plt.axis('off')

# Edge Detected Image
plt.subplot(1, 3, 2)
plt.imshow(edge_detected_image, cmap='gray')
plt.title('Edge Detection')
plt.axis('off')

# Blurred Image
plt.subplot(1, 3, 3)
plt.imshow(blurred_image)
plt.title('Blurred Image')
plt.axis('off')

plt.tight_layout()
plt.show()
